stages:
  - publish
  - release

publish:
  stage: publish
  image: alpine:latest
  script:
    - echo "Preparing React Native APK for release..."
    - cp mobile/android/app/build/outputs/apk/release/app-release.apk "$CI_PROJECT_DIR"
    - echo "APK copied to project directory for further steps."
  artifacts:
    paths:
      - app-release.apk
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: always


release:
  stage: release
  image: alpine:latest
  dependencies:
    - publish:reactnative:tag
  script:
    - apk add --no-cache curl jq
    - echo "Installing GitLab release CLI..."
    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - echo "Uploading APK to GitLab..."
    - |
      curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file app-release.apk \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/reactnative/${CI_COMMIT_TAG}/app-release.apk" \
           > upload_response.json
    - FILE_URL=$(jq -r '.url' upload_response.json)
    - '[ -z "$FILE_URL" ] && echo "Error: Failed to upload APK." && exit 1 || echo "APK uploaded successfully: $FILE_URL"'
    - echo "Creating GitLab release..."
    - |
      release-cli create \
        --name "Release ${CI_COMMIT_TAG}" \
        --tag-name "${CI_COMMIT_TAG}" \
        --ref "${CI_COMMIT_SHA}" \
        --assets-link '{"name":"Release APK", "url":"'${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/reactnative/${CI_COMMIT_TAG}/app-release.apk'", "link_type":"other"}'
    - echo "GitLab release created successfully!"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: always
