stages:
  - release
  - release-mobile

variables:
  APK_PATH: "mobile/android/app/build/outputs/apk/release/app-release.apk"

release:
  stage: release
  dependencies:
    - validate-backend-blue
    - validate-frontend-blue
  script:
    - echo "Creating GitLab release..."
    - export RELEASE_TAG=$(date +%Y.%m.%d.%H%M%S)
    - git tag "$RELEASE_TAG"
    - git push origin "$RELEASE_TAG"
    - |
      curl --request POST \
           --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" \
           --data "name=Release $RELEASE_TAG&tag_name=$RELEASE_TAG&description=Automated release $RELEASE_TAG" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
    - echo "GitLab release created with tag $RELEASE_TAG."

release-mobile:
  stage: release-mobile
  dependencies:
    - test-auto-mobile
  before_script:
    - echo "Updating and installing dependencies..."
    - apt-get update && apt-get install -y jq
  script: |
    echo "Packaging and pushing APK to GitLab..."
    if [ ! -f "$APK_PATH" ]; then
      echo "Error: APK not found at $APK_PATH."
      exit 1
    fi
    curl --request POST \
         --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" \
         --form "file=@$APK_PATH" \
         "$CI_API_V4_URL/projects/$CI_PROJECT_ID/uploads" > upload_response.json
    FILE_URL=$(jq -r '.url' upload_response.json)
    if [ -z "$FILE_URL" ]; then
      echo "Error: Failed to upload APK."
      exit 1
    fi
    echo "APK uploaded successfully. URL: $FILE_URL"
    echo "Creating GitLab release for mobile APK..."
    export RELEASE_TAG=$(date +%Y.%m.%d.%H%M%S)
    git tag "$RELEASE_TAG"
    git push origin "$RELEASE_TAG"
    curl --request POST \
         --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" \
         --data "name=Mobile Release $RELEASE_TAG&tag_name=$RELEASE_TAG&description=Automated mobile release $RELEASE_TAG\nAPK URL: $FILE_URL" \
         "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
    echo "Mobile GitLab release created with tag $RELEASE_TAG."
