stages:
  - test-auto-mobile
  - build-mobile
  - publish
  - release

cache:
  key: gradle-cache
  paths:
    - .gradle/
    - mobile/android/.gradle/

variables:
  ANDROID_SDK_ROOT: "/sdk"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

# Test Mobile
test-auto-mobile:
  stage: test-auto-mobile
  image: reactnativecommunity/react-native-android:latest
  script:
    - echo "Running dummy test for mobile..."
    - cd mobile
    - npm install
    - echo "Dummy test executed successfully."
  artifacts:
    paths:
      - dummy_test.log
    expire_in: 1 day

# Build Mobile APK
build-mobile:
  stage: build-mobile
  image: reactnativecommunity/react-native-android:latest
  dependencies:
    - test-auto-mobile
  script:
    - echo "Building mobile application (React Native)..."
    - cd mobile
    - npm install
    - npm run android-release
    - echo "APK built successfully."
  artifacts:
    paths:
      - mobile/android/app/build/outputs/apk/release/app-release.apk
    expire_in: 1 week

# Prepare APK for Release
publish:
  stage: publish
  dependencies:
    - build-mobile
  image: alpine:latest
  script:
    - echo "Preparing React Native APK for release..."
    - cp mobile/android/app/build/outputs/apk/release/app-release.apk "$CI_PROJECT_DIR"
    - echo "APK copied to project directory for further steps."
  artifacts:
    paths:
      - app-release.apk
    expire_in: 1 hour

# Release APK
release:
  stage: release
  image: alpine:latest
  dependencies:
    - publish
  script:
    - apk add --no-cache curl jq
    - echo "Installing GitLab release CLI..."
    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - echo "Uploading APK to GitLab..."
    - |
      curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file app-release.apk \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/reactnative/${CI_COMMIT_TAG:-latest}/app-release.apk" \
           > upload_response.json
      cat upload_response.json
      FILE_URL=$(jq -r '.url // empty' upload_response.json)
      if [ -z "$FILE_URL" ]; then
      echo "Error: Failed to upload APK. Check upload_response.json for details:";
      cat upload_response.json;
      exit 1;
      else
      echo "APK uploaded successfully: $FILE_URL";
      fi
    - TAG_NAME=${CI_COMMIT_TAG:-"default-tag-name"}
    - echo "Creating GitLab release..."
    - |
      if [ "$FILE_URL" = "Not Available" ]; then
        release-cli create \
        --name "Release ${TAG_NAME}" \
        --tag-name "${TAG_NAME}" \
        --ref "${CI_COMMIT_SHA}";
      else
        release-cli create \
        --name "Release ${TAG_NAME}" \
        --tag-name "${TAG_NAME}" \
        --ref "${CI_COMMIT_SHA}" \
        --assets-link "{\"name\":\"Release APK\", \"url\":\"${FILE_URL}\", \"link_type\":\"other\"}";
      fi
    - echo "GitLab release created successfully!"

