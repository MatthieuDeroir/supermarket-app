stages:
  - test-build
  - test
  - deploy-build
  - deploy-green
  - test-green
  - deploy-blue
  - rollback

default:
  image: docker:latest
  services:
    - docker:dind

before_script:
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H $BLUE_SERVER_IP $GREEN_SERVER_IP $LOAD_BALANCER_IP >> ~/.ssh/known_hosts
  - git config --global user.email "ci-runner@yourdomain.com"
  - git config --global user.name "CI Runner"
  - git remote set-url origin https://matthieu.deroir@epitech.eu:$CI_PUSH_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git


# Stage 1: Build the dev environment for testing
test-build:
  stage: test-build
  script:
    - echo "Building test environment..."
    - docker build -t my-app-backend-dev -f ./backend/Dockerfile.dev ./backend
    - docker build -t my-app-frontend-dev -f ./frontend/Dockerfile.dev ./frontend

# Stage 2: Run tests
test:
  stage: test
  script:
    - echo "Running backend tests..."
    - docker run --rm my-app-backend-dev deno test
    - echo "Running frontend tests..."
    - docker run --rm my-app-frontend-dev npm run test

# Stage 3: Build the prod environment for deployment
deploy-build:
  stage: deploy-build
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "Fetching latest Git tag..."
    - LATEST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
    - echo "Latest tag= $LATEST_TAG"

    # Increment version
    - IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
    - PATCH=$((PATCH + 1))
    - NEW_TAG="$MAJOR.$MINOR.$PATCH"
    - echo "New tag= $NEW_TAG"

    # Check if tag exists
    - |
      if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
        echo "Tag $NEW_TAG already exists. Skipping tagging."
      else
        git tag "$NEW_TAG"
        git push origin "$NEW_TAG"
      fi


    # Create and push new Git tag
    - git tag "$NEW_TAG"
    - git push origin "$NEW_TAG"

    # Build and tag Docker images
    - docker build -t "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$NEW_TAG" -f ./backend/Dockerfile.prod ./backend
    - docker build -t "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$NEW_TAG" -f ./frontend/Dockerfile.prod ./frontend
    - docker tag "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$NEW_TAG" "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:latest"
    - docker tag "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$NEW_TAG" "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:latest"

    # Push Docker images
    - docker push "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$NEW_TAG"
    - docker push "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:latest"
    - docker push "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$NEW_TAG"
    - docker push "$DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:latest"

# Stage 4: Deploy to Green environment
deploy-green:
  stage: deploy-green
  script:
    - echo "Deploying to Green environment..."
    - VERSION=$(git describe --tags --abbrev=0)
    - echo "Deploying version $VERSION to Green environment..."
    - ssh $DEPLOY_USER_GREEN@$GREEN_SERVER_IP "
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$VERSION &&
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$VERSION &&
      docker stop backend || true && docker stop frontend || true &&
      docker rm backend || true && docker rm frontend || true &&
      docker run -d --name backend -p 4000:4000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$VERSION &&
      docker run -d --name frontend -p 80:3000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$VERSION
      "

# Stage 5: Test Green environment
test-green:
  stage: test-green
  script:
    - echo "Performing health checks on Green environment..."
    - curl -f http://$GREEN_SERVER_IP:4000/health || (echo 'Green environment health check failed!' && exit 1)
    - echo "Green environment is healthy."

# Stage 6: Deploy to Blue environment
deploy-blue:
  stage: deploy-blue
  script:
    - echo "Deploying to Blue environment..."
    - VERSION=$(git describe --tags --abbrev=0)
    - echo "Deploying version $VERSION to Blue environment..."
    - ssh $DEPLOY_USER_BLUE@$BLUE_SERVER_IP "
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$VERSION &&
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$VERSION &&
      docker stop backend || true && docker stop frontend || true &&
      docker rm backend || true && docker rm frontend || true &&
      docker run -d --name backend -p 4000:4000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$VERSION &&
      docker run -d --name frontend -p 80:3000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$VERSION
      "

# Stage 7: Rollback in case of failure
rollback:
  stage: rollback
  script:
    - echo "Rolling back Green environment..."
    - PREVIOUS_TAG=$(git describe --tags $(git rev-list --tags --skip=1 --max-count=1))
    - echo "Rolling back to version $PREVIOUS_TAG..."
    - ssh $DEPLOY_USER_GREEN@$GREEN_SERVER_IP "
      docker stop backend || true && docker stop frontend || true &&
      docker rm backend || true && docker rm frontend || true &&
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$PREVIOUS_TAG &&
      docker pull $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$PREVIOUS_TAG &&
      docker run -d --name backend -p 4000:4000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-backend:$PREVIOUS_TAG &&
      docker run -d --name frontend -p 80:3000 $DOCKER_NAMESPACE/$DOCKER_REPOSITORY-frontend:$PREVIOUS_TAG
      "
    - echo "Rollback to version $PREVIOUS_TAG completed."
  when: on_failure
